services:
  mongo1:
    hostname: mongo1 
    build:
      context: .
      dockerfile: mongodb.dockerfile
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017", "--auth", "--keyFile", "/etc/keyfile" ]
    volumes:
      - "mongo1_data:/data/db"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo1:27017',priority:2},{_id:1,host:'mongo2:27017',priority:1},{_id:2,host:'mongo3:27017',priority:1}]})}" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30

  mongo2:
    build:
      context: .
      dockerfile: mongodb.dockerfile
    hostname: mongo2 
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017", "--auth", "--keyFile", "/etc/keyfile"]
    volumes:
      - "mongo2_data:/data/db"
  mongo3:
    build: 
      context: .
      dockerfile: mongodb.dockerfile
    hostname: mongo3 
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017", "--auth", "--keyFile", "/etc/keyfile"]
    volumes:
      - "mongo3_data:/data/db"

  app: 
    hostname: app 
    build:
      context: .
      dockerfile : app/dockerfile
    environment:
      - MONGODB_URI=mongodb://app:app@mongo1:27017,mongo2:27017,mongo3:27017/admin?repliaSet=rs0&maxIdleTimeMS=6000000&minPoolSize=10
    
    
volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
